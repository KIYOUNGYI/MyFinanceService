version: '3'
services:
    mysql:
      image: mysql:8.0
      networks:
        - my_network
      volumes:
        - ./db/conf.d:/etc/mysql/conf.d # 내 로컬에서 /db/conf.d 파일이 실제 도커 내부 컨테이너의 /etc/mysql/conf.d 와 동기화 될 것이다.
        - ./db/data:/var/lib/mysql
        - ./db/initdb.d:/docker-entrypoint-initdb.d
      env_file: .env # mysql 환경변수 파일
      ports:
        - "3306:3306"
      environment:
        - TZ=Asia/Seoul
        - MYSQL_ROOT_PASSWORD=rootpassword
        - MYSQL_USER=mysqluser
        - MYSQL_PASSWORD=mysqlpw
    member-service:
      image: member-service:1.0.1
      networks:
        - my_network
      ports:
        - "8082:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
      depends_on:
        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
      environment:
        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
        - SPRING_DATASOURCE_USERNAME=mysqluser
        - SPRING_DATASOURCE_PASSWORD=mysqlpw
        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=host.docker.internal:9092
        - LOGGING_TOPIC=myfinance.logging.out.stdout
    asset-admin:
      image: asset-admin:1.0.0
      networks:
        - my_network
      ports:
        - "8083:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
      depends_on:
        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
      environment:
        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
        - SPRING_DATASOURCE_USERNAME=mysqluser
        - SPRING_DATASOURCE_PASSWORD=mysqlpw
        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=host.docker.internal:9092
        - LOGGING_TOPIC=myfinance.logging.out.stdout
    asset-client:
      image: asset-client:1.0.0
      networks:
        - my_network
      ports:
        - "8084:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
      depends_on:
        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
      environment:
        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
        - SPRING_DATASOURCE_USERNAME=mysqluser
        - SPRING_DATASOURCE_PASSWORD=mysqlpw
        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=host.docker.internal:9092
        - LOGGING_TOPIC=myfinance.logging.out.stdout
        - SERVICE_MEMBER_URL=http://member-service:8080 # 실제 어플리케이션 포트를 가리켜야함
        - SERVICE_ASSET_ADMIN_URL=http://asset-admin:8080 # 실제 어플리케이션 포트를 가리켜야함
    beta-calculate-service:
      image: beta-calculate-service:1.0.0
      networks:
        - my_network
      ports:
        - "8085:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
#      depends_on:
#        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
    yahoo-rest-api-service:
      networks:
        - my_network
      build:
        context: ./yahoo-rest-api-service
        dockerfile: Dockerfile
      ports:
        - "3000:3000"
    zk1:
      container_name: zookeeper1
      image: wurstmeister/zookeeper:latest
      restart: always
      hostname: zk1
      ports:
        - "2181:2181"
      environment:
        ZOO_MY_ID: 1
        ZOO_SERVERS: server.1=zk1:2888:3888;2181
      volumes:
        - "~/zk-cluster/zk1/data:/data"


    kafka1:
      container_name: kafka1
      image: wurstmeister/kafka:latest
      restart: on-failure
      depends_on:
        - zk1
      ports:
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ADVERTISED_HOST_NAME: host.docker.internal
        BOOTSTRAP_SERVERS: host.docker.internal:9092
        KAFKA_ZOOKEEPER_CONNECT: "zk1:2181"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 지금은 1개만 갖고 할 거라 1로 설정함

    kafka-ui:
      image: provectuslabs/kafka-ui
      container_name: kafka-ui
      ports:
        - "8989:8080"
      restart: always
      environment:
        - KAFKA_CLUSTERS_0_NAME=local
        - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=host.docker.internal:9092
        - KAFKA_CLUSTERS_0_ZOOKEEPER=zk1:2181

    logging-consumer:
      image: logging-consumer:1.0.0
      networks:
        - my_network
      restart: always
      depends_on:
        - kafka1
        - zk1
      environment:
        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=host.docker.internal:9092
        - LOGGING_TOPIC=myfinance.logging.out.stdout
networks:
  my_network:
    driver: bridge