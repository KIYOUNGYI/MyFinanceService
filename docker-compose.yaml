version: '3'
services:
#    mysql:
#      image: mysql:8.0
#      networks:
#        - my_network
#      volumes:
#        - ./db/conf.d:/etc/mysql/conf.d # 내 로컬에서 /db/conf.d 파일이 실제 도커 내부 컨테이너의 /etc/mysql/conf.d 와 동기화 될 것이다.
#        - ./db/data:/var/lib/mysql
#        - ./db/initdb.d:/docker-entrypoint-initdb.d
#      env_file: .env # mysql 환경변수 파일
#      ports:
#        - "3306:3306"
#      environment:
#        - TZ=Asia/Seoul
#        - MYSQL_ROOT_PASSWORD=rootpassword
#        - MYSQL_USER=mysqluser
#        - MYSQL_PASSWORD=mysqlpw
#    member-service:
#      image: member-service:1.0.1
#      networks:
#        - my_network
#      ports:
#        - "8082:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
#      depends_on:
#        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
#      environment:
#        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
#        - SPRING_DATASOURCE_USERNAME=mysqluser
#        - SPRING_DATASOURCE_PASSWORD=mysqlpw
#        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
#        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#    asset-admin:
#      image: asset-admin:1.0.0
#      networks:
#        - my_network
#      ports:
#        - "8083:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
#      depends_on:
#        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
#      environment:
#        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
#        - SPRING_DATASOURCE_USERNAME=mysqluser
#        - SPRING_DATASOURCE_PASSWORD=mysqlpw
#        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
#        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#    asset-client:
#      image: asset-client:1.0.0
#      networks:
#        - my_network
#      ports:
#        - "8084:8080"#왼쪽 : os 레벨에서 컨테이너까지 어떤 포트로 매핑될 것인지 / 오른쪽 : 컨테이너 안에 있는 실제 어플리케이션 포트
#      depends_on:
#        - mysql # mysql 이 실행되어야지만 이 member-service 가 실행될 수 있다
#      environment:
#        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/finance?useSSL=false&allowPublicKeyRetrieval=true
#        - SPRING_DATASOURCE_USERNAME=mysqluser
#        - SPRING_DATASOURCE_PASSWORD=mysqlpw
#        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
#        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
#    yahoo-rest-api-service:
#      networks:
#        - my_network
#      build:
#        context: ./yahoo-rest-api-service
#        dockerfile: Dockerfile
#      ports:
#        - "3000:3000"
    zookeeper:
#      image: 'arm64v8/zookeeper:3.8'
      image: 'zookeeper:3.8'
      platform: linux/arm64
      networks:
        - my_network
      ports:
        - '2181:2181'
      environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
        - ZOO_TLS_CLIENT_AUTH=none
        - ZOO_TLS_QUORUM_CLIENT_AUTH=none

    kafka:
      image: 'bitnami/kafka:3.4.0'
      networks:
        - my_network
      ports:
        - '9092:9092'
      environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_LISTENERS=LC://kafka:29092,LX://kafka:9092
        - KAFKA_CFG_ADVERTISED_LISTENERS=LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LC:PLAINTEXT,LX:PLAINTEXT
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LC
      depends_on:
        - zookeeper

#    kafka-ui:
#      image: provectuslabs/kafka-ui
#      container_name: kafka-ui
#      networks:
#        - my_network
#      ports:
#        - "8989:8080"
#      restart: always
#      depends_on:
#        - kafka
#        - zookeeper
#      environment:
#        - KAFKA_CLUSTERS_0_NAME=local
#        - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
#        - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

#    logging-consumer:
#      image: fastcampus-pay-logging-consumer:1.0.0
#      networks:
#        - my_network
#      restart: always
#      depends_on:
#        - kafka
#        - zookeeper
#      environment:
#        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
#        - LOGGING_TOPIC=fastcampus.logging.out.stdout
networks:
  my_network:
    driver: bridge